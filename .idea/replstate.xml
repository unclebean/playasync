<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1491049152680">{:repl-history {:ide [], :local [&quot;(println \&quot;test\&quot;)&quot; &quot;(require '[clojure.core.reducers :as r])&quot; &quot;(r/map (partial * 2) [1 2 3 4])&quot; &quot;(reduce conj [] (r/map (partial * 2) [1 2 3 4 5]))&quot; &quot;(reduce + [1 2 3 4 5])&quot; &quot;(defn my-reduce\n  ([f coll] (coll-reduce coll f))\n  ([f init call] (coll-reduce coll f init)))&quot; &quot;(defn make-reducer [reducible transformf] \n  (reify\n    CollReduce\n    (coll-reduce [_ f1]\n      (coll-reduce reducible (transformf f1) (f1)))\n    (coll-reduce [_ f1 init]\n      (coll-reduce reducible (transformf f1) init))\n    )\n  )&quot; &quot;(defprotocol CollReduce\n  (coll-reduce [coll f] [coll f init]))&quot; &quot;(fold + [1 2 3 4 5 6 ])&quot; &quot;(r/fold + [1 2 3 4 5])&quot; &quot;(re-seq #\&quot;\\w+\&quot; \&quot;five potato six potato seven potato more\&quot;)&quot; &quot;(pmap #(frequencies (re-seq #\&quot;\\w+\&quot; %)) [\&quot;one potato two potato three potato four\&quot; \&quot;five potato six potato seven potato more\&quot;])&quot; &quot;(map #(frequencies (re-seq #\&quot;\\w+\&quot; %)) [\&quot;one potato two potato three potato four\&quot; \&quot;five potato six potato seven potato more\&quot;])&quot; &quot;(+ {\&quot;one\&quot; 1, \&quot;potato\&quot; 3, \&quot;two\&quot; 1, \&quot;three\&quot; 1, \&quot;four\&quot; 1} {\&quot;five\&quot; 1, \&quot;potato\&quot; 3, \&quot;six\&quot; 1, \&quot;seven\&quot; 1, \&quot;more\&quot; 1})&quot; &quot;(merge-with + {\&quot;one\&quot; 1, \&quot;potato\&quot; 3, \&quot;two\&quot; 1, \&quot;three\&quot; 1, \&quot;four\&quot; 1} {\&quot;five\&quot; 1, \&quot;potato\&quot; 3, \&quot;six\&quot; 1, \&quot;seven\&quot; 1, \&quot;more\&quot; 1})&quot; &quot;(doc merge)&quot; &quot;(merge [1 2 3 4 6])&quot; &quot;(doc pcalls)&quot; &quot;(doc pvalues)&quot; &quot;(def sum (future (+ 1 2 3 4 5)))&quot; &quot;@sum&quot; &quot;(doc future-call)&quot; &quot;(def my-agent (agent 0))&quot; &quot;(send my-agent + 2)&quot; &quot;@my-agent&quot; &quot;(def checking (ref 10000))&quot; &quot;(def savings (ref 20000))&quot; &quot;(dosync (alter checking - 200) \n        (alter savings + 200))&quot; &quot;@checking&quot; &quot;(defn transfer [from to amount]\n  (dosync \n    (alter from - amount)\n    (alter to + amount)\n    )\n  )&quot; &quot;(doc dotimes)&quot; &quot;(defn stress-thread [from to iterations amount]\n  (Thread. #(dotimes [_ iterations] (transfer fromt to amount)))\n  )&quot; &quot;(defn stress-thread [from to iterations amount]\n  (Thread. #(dotimes [_ iterations] (transfer from to amount)))\n  )&quot; &quot;(defn -main [&amp; args]\n  (let [t1 (stress-thread checking savings 100 100)\n        t2 (stress-thread checking savings 200 100)]\n    (.start t1)\n    (.start t2)\n    (.join t1)\n    (.join t2)\n    )\n  (println \&quot;checking=\&quot; @checking \&quot; savings=\&quot; @savings)\n  )&quot; &quot;(defn -main [&amp; args]\n  (let [t1 (stress-thread checking savings 100 100)\n        t2 (stress-thread savings checking 200 100)]\n    (.start t1)\n    (.start t2)\n    (.join t1)\n    (.join t2)\n    )\n  (println \&quot;checking=\&quot; @checking \&quot; savings=\&quot; @savings)\n  )&quot; &quot;(-main)&quot; &quot;(defn tt [&amp; args]\n  (println \&quot;Before: Checking =\&quot; @checking \&quot; Savings =\&quot; @savings)\n  (let [t1 (stress-thread checking savings 100 100)\n        t2 (stress-thread savings checking 200 100)]\n    (.start t1)\n    (.start t2)\n    (.join t1)\n    (.join t2))\n  (println \&quot;After: Checking =\&quot; @checking \&quot; Savings =\&quot; @savings))&quot; &quot;(def attempts (atom 0))\n(def transfers (agent 0))\n\n(defn transfer [from to amount]\n  (dosync\n    (swap! attempts inc) // Side-effect in transaction - DON'T DO THIS\n    (send transfers inc)\n    (alter from - amount)\n    (alter to + amount)))\n\n(def checking (ref 10000))\n(def savings (ref 20000))\n\n(defn stress-thread [from to iterations amount]\n  (Thread. #(dotimes [_ iterations] (transfer from to amount))))\n\n(defn tt [&amp; args]\n  (println \&quot;Before: Checking =\&quot; @checking \&quot; Savings =\&quot; @savings)\n  (let [t1 (stress-thread checking savings 100 100)\n        t2 (stress-thread savings checking 200 100)]\n    (.start t1)\n    (.start t2)\n    (.join t1)\n    (.join t2))\n  (await transfers)\n  (println \&quot;Attempts: \&quot; @attempts)\n  (println \&quot;Transfers: \&quot; @transfers)\n  (println \&quot;After: Checking =\&quot; @checking \&quot; Savings =\&quot; @savings))\n&quot; &quot;(defn transfer [from to amount]\n  (dosync\n    (swap! attempts inc)\n    (send transfers inc)\n    (alter from - amount)\n    (alter to + amount)))\n\n(def checking (ref 10000))\n(def savings (ref 20000))\n\n(defn stress-thread [from to iterations amount]\n  (Thread. #(dotimes [_ iterations] (transfer from to amount))))\n\n(defn tt [&amp; args]\n  (println \&quot;Before: Checking =\&quot; @checking \&quot; Savings =\&quot; @savings)\n  (let [t1 (stress-thread checking savings 100 100)\n        t2 (stress-thread savings checking 200 100)]\n    (.start t1)\n    (.start t2)\n    (.join t1)\n    (.join t2))\n  (await transfers)\n  (println \&quot;Attempts: \&quot; @attempts)\n  (println \&quot;Transfers: \&quot; @transfers)\n  (println \&quot;After: Checking =\&quot; @checking \&quot; Savings =\&quot; @savings))&quot; &quot;(tt)&quot; &quot;(defn dd [&amp; args]\n  (println \&quot;Before: Checking =\&quot; @checking \&quot; Savings =\&quot; @savings)\n  (let [t1 (stress-thread checking savings 100 100)\n        t2 (stress-thread savings checking 200 100)]\n    (.start t1)\n    (.start t2)\n    (.join t1)\n    (.join t2))\n  (println \&quot;After: Checking =\&quot; @checking \&quot; Savings =\&quot; @savings))&quot; &quot;(dd)&quot; &quot;(defn transfer [from to amount]\n  (dosync\n    (alter from - amount)\n    (alter to + amount)))\n\n(def checking (ref 10000))\n(def savings (ref 20000))\n\n(defn stress-thread [from to iterations amount]\n  (Thread. #(dotimes [_ iterations] (transfer from to amount))))\n\n(defn bb [&amp; args]\n  (println \&quot;Before: Checking =\&quot; @checking \&quot; Savings =\&quot; @savings)\n  (let [t1 (stress-thread checking savings 100 100)\n        t2 (stress-thread savings checking 200 100)]\n    (.start t1)\n    (.start t2)\n    (.join t1)\n    (.join t2))\n\n  (println \&quot;After: Checking =\&quot; @checking \&quot; Savings =\&quot; @savings))\n&quot; &quot;(bb)&quot; &quot;(mod 1 5)&quot; &quot;(mod 2 5)&quot; &quot;(mod 10 5)&quot; &quot;(doc ref)&quot; &quot;(defn claim-chopsticks [philosopher left right]\n  (dosync \n    (when (and (= (ensure left) :thinking) (= (ensure right) :thinking))\n      (ref-set philosopher :eating)\n      ))\n  )&quot; &quot;(defn release-chopsticks [philosopher]\n  (dosync\n    (ref-set philosopher :thinking)))&quot; &quot;(doc ensure)&quot; &quot;(defn think []\n  (Thread/sleep (rand 1000))\n  )&quot; &quot;(defn eat []\n  (Thread/sleep (rand 1000))\n  )&quot; &quot;(defn philosopher-thread [n]\n  (Thread. \n    #(let [philosopher (philosophers n)\n           left (philosophers (mod (- n 1) 5))\n           right (philosophers (mod (+ n 1) 5))\n           ]\n       (while true\n         (think)\n         (when (claim-chopsticks philosopher left right)\n           (eat)\n           (release-chopsticks philosopher)\n           )\n         )\n       ))\n  )&quot; &quot;(defn bb2 []\n  (let [threads (map philosopher-thread (range 5))]\n    (doseq [thread threads] (.start thread))\n    (doseq [thread threads] (.join thread))\n    )\n  )&quot; &quot;(bb2)&quot; &quot;(doc dosync)&quot; &quot;(dosync (println \&quot;&gt;&gt;&gt;\&quot;))&quot; &quot;(doc when)&quot; &quot;(def philosophers (into [] (repeatedly 5 #(ref :thinking))))&quot; &quot;(defn claim-chopsticks [philosopher left right]\n  (dosync\n    (when (and (= (ensure left) :thinking) (= (ensure right) :thinking))\n      (ref-set philosopher :eating)\n      )\n    ))&quot; &quot;(claim-chopsticks (philosophers 0) (philosophers (mod -1 5)) (philosophers (mod 1 5)))&quot; &quot;(claim-chopsticks (philosophers 1) (philosophers (mod 0 5)) (philosophers (mod 2 5)))&quot; &quot;(when :eating\n  (println \&quot;&lt;&lt;&gt;&lt;&gt;&gt;\&quot;)\n  )&quot; &quot;(when false\n  (println \&quot;&lt;&lt;&gt;&lt;&gt;&gt;\&quot;)\n  )&quot; &quot;(philosophers 1)&quot; &quot;(= (philosophers 1) :thinking)&quot; &quot;(= (philosophers 1) :eating)&quot; &quot;(=  @(philosophers 1) :eating)&quot; &quot;(=  @(philosophers 1) :thinking)&quot; &quot;(doc doseq)&quot;], :remote []}}</component>
</project>